// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../app/db/entities/day_entity.dart';
import '../../../app/db/entities/sprint_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5675766804227349914),
      name: 'DayEntity',
      lastPropertyId: const IdUid(4, 1517808283418266885),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2671847129005100901),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6556580537126897230),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4551408181635290557),
            name: 'time',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1517808283418266885),
            name: 'comment',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5199159190633260004),
      name: 'SprintEntity',
      lastPropertyId: const IdUid(6, 4422840579414952673),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7663230687539724730),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 636108963483251538),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2789476117015799077),
            name: 'initialDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4422840579414952673),
            name: 'finalDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 5199159190633260004),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3717051831630531000, 5365798992828605063],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DayEntity: EntityDefinition<DayEntity>(
        model: _entities[0],
        toOneRelations: (DayEntity object) => [],
        toManyRelations: (DayEntity object) => {},
        getId: (DayEntity object) => object.id,
        setId: (DayEntity object, int id) {
          object.id = id;
        },
        objectToFB: (DayEntity object, fb.Builder fbb) {
          final commentOffset = fbb.writeString(object.comment);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.time);
          fbb.addOffset(3, commentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final timeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final commentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = DayEntity(
              date: dateParam, time: timeParam, comment: commentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SprintEntity: EntityDefinition<SprintEntity>(
        model: _entities[1],
        toOneRelations: (SprintEntity object) => [],
        toManyRelations: (SprintEntity object) => {},
        getId: (SprintEntity object) => object.id,
        setId: (SprintEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SprintEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(4, object.initialDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.finalDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final initialDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final finalDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = SprintEntity(
              name: nameParam,
              initialDate: initialDateParam,
              finalDate: finalDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DayEntity] entity fields to define ObjectBox queries.
class DayEntity_ {
  /// see [DayEntity.id]
  static final id = QueryIntegerProperty<DayEntity>(_entities[0].properties[0]);

  /// see [DayEntity.date]
  static final date =
      QueryIntegerProperty<DayEntity>(_entities[0].properties[1]);

  /// see [DayEntity.time]
  static final time =
      QueryDoubleProperty<DayEntity>(_entities[0].properties[2]);

  /// see [DayEntity.comment]
  static final comment =
      QueryStringProperty<DayEntity>(_entities[0].properties[3]);
}

/// [SprintEntity] entity fields to define ObjectBox queries.
class SprintEntity_ {
  /// see [SprintEntity.id]
  static final id =
      QueryIntegerProperty<SprintEntity>(_entities[1].properties[0]);

  /// see [SprintEntity.name]
  static final name =
      QueryStringProperty<SprintEntity>(_entities[1].properties[1]);

  /// see [SprintEntity.initialDate]
  static final initialDate =
      QueryIntegerProperty<SprintEntity>(_entities[1].properties[2]);

  /// see [SprintEntity.finalDate]
  static final finalDate =
      QueryIntegerProperty<SprintEntity>(_entities[1].properties[3]);
}
